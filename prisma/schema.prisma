generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_URL")
  directUrl    = env("POSTGRES_PRISMA_URL")
  relationMode = "prisma"
}

model Users {
  id Int @id @default(autoincrement())

  username String @unique
  hash     String // Hashed password
  salt     String // Salt for password hashing

  score               Int @default(0)
  dailyGoal           Int @default(0)
  dailyGoalPreference Int @default(20)

  lastCourse   Int      @default(0)
  creationDate DateTime @default(now())
  avatar       Int      @default(0) // chiant de stocker du base64, on donne une liste prédéfinie d'avatars et on stocke l'index

  language       String           @default("fr") // fr | en // TODO: default to null
  courses        UserCourse[]
  streaksRecords StreaksRecords[]
}

model StreaksRecords {
  id Int @id @default(autoincrement())

  userId Int
  user   Users @relation(fields: [userId], references: [id])

  date DateTime

  @@index([userId])
}

model UserCourse {
  currentUnitIndex           Int @default(0)
  currentUnitCheckpointIndex Int @default(0)
  currentCheckpointProgress  Int @default(0)

  userId Int
  user   Users @relation(fields: [userId], references: [id])

  courseId Int
  course   Courses @relation(fields: [courseId], references: [id])

  @@id([userId, courseId])
  @@index([courseId])
  @@index([userId])
}

model Courses {
  id Int @id @default(autoincrement())

  celeneLink String?
  department String // sti, mri, gsi, stpi
  semester   Int

  units      Units[]
  userCourse UserCourse[]

  courseTranslation CourseTranslation[]
}

model CourseTranslation {
  id Int @id @default(autoincrement())

  courseId Int
  course   Courses @relation(fields: [courseId], references: [id])

  language String

  name        String
  description String?

  @@index([courseId])
}

model Units {
  id Int @id @default(autoincrement())

  index Int

  courseId Int
  course   Courses @relation(fields: [courseId], references: [id])

  checkpoints Checkpoints[]

  unitTranslation UnitTranslation[]

  @@index([courseId])
}

model UnitTranslation {
  id Int @id @default(autoincrement())

  unitId Int
  unit   Units @relation(fields: [unitId], references: [id])

  language String

  name String

  @@index([unitId])
}

model Checkpoints {
  id Int @id @default(autoincrement())

  index Int

  questionsPerTry   Int // Nombre de questions à poser à chaque essai
  triesRequired     Int // Nombre d'essais nécessaires pour valider le checkpoint
  isFinalCheckpoint Boolean @default(false) // Si c'est le dernier checkpoint de l'unit

  FillInTheBlanksQuestion FillInTheBlanksQuestion[]
  TimedQuestion           TimedQuestion[]
  QCMQuestion             QCMQuestion[]

  unitId Int
  unit   Units @relation(fields: [unitId], references: [id])

  @@index([unitId])
}

model FillInTheBlanksQuestion {
  id Int @id @default(autoincrement())

  checkpointId Int
  checkpoint   Checkpoints @relation(fields: [checkpointId], references: [id])

  duration                           Int? // Durée en secondes

  FillInTheBlanksQuestionTranslation FillInTheBlanksQuestionTranslation[]

  @@index([checkpointId])
}

model FillInTheBlanksQuestionTranslation {
  id Int @id @default(autoincrement())

  questionId Int
  parent   FillInTheBlanksQuestion @relation(fields: [questionId], references: [id])

  language String

  question String
  textWithHoles  String // "Le {} est un animal très {}." 

  propositions  String[] // ["chien", "mignon", "fourchette"]
  correctAnswer String[] // ["chien", "mignon"]

  @@index([questionId])
}

model TimedQuestion {
  id Int @id @default(autoincrement())

  checkpointId Int
  checkpoint   Checkpoints @relation(fields: [checkpointId], references: [id])

  duration Int? // Durée en secondes

  TimedQuestionTranslation TimedQuestionTranslation[]

  @@index([checkpointId])
}

model TimedQuestionTranslation {
  id Int @id @default(autoincrement())

  questionId Int
  parent   TimedQuestion @relation(fields: [questionId], references: [id])

  language String

  question String
  aiPromptSolution String

  @@index([questionId])
}

model QCMQuestion {
  id Int @id @default(autoincrement())

  checkpointId Int
  checkpoint   Checkpoints @relation(fields: [checkpointId], references: [id])

  duration Int? // Durée en secondes

  QCMQuestionTranslation QCMQuestionTranslation[]

  @@index([checkpointId])
}

model QCMQuestionTranslation {
  id Int @id @default(autoincrement())

  questionId Int
  parent   QCMQuestion @relation(fields: [questionId], references: [id])

  language String

  question String
  answers  String[]
  correctAnswer String

  @@index([questionId])
}